dimension :: 1
axes :: x

## external functions defined in math.h
extern function :: sqrt

## min, max functions
max = fun(a, b) if a > b then a else b
min = fun(a, b) if a > b then b else a
max3 = fun(a, b, c) max(max(a,b),c)
min3 = fun(a, b, c) min(min(a,b),c)

## parameters
# max_signal_speed : upper limit of signal speed; |u + S| < max_signal_speed must be satisfied everywhere
# C_cfl            : Courant number
# dt               : size of time step
# gamma            : specific heat ratio
# beta             : parameter of slope limitter
double :: max_signal_speed = 4
double :: C_cfl = 0.8
double :: dt = C_cfl*dx/max_signal_speed
double :: gamma = 7.0/5.0
double :: gamma1 = gamma - 1.0
double :: beta = 1.0  # MINMOD flux limitter
#double :: beta = 2.0  # SUPERBEE flux limitter

## functions
id = fun(A) A
sum = fun(A) A(0) + A(1) + A(2)

Xf = fun(U) (U[+1/2])
Xb = fun(U) (U[-1/2])

ddx = fun(F) (Xf(F) - Xb(F))/dx

sep_step = fun(x, lval, rval) if x < 0 then lval else rval
center_step_x = fun(x, lval, rval) sep_step(x - total_grid_x/2, lval, rval)

sq = fun(x) x*x
cdot = fun(A, B) sum(A*B)
norm2 = fun(V) cdot(V,V)

append = fun(A_x, A_t) (A_x, A_t(0), A_t(1))
separate = fun(A) (A(0), (A(1), A(2)))       # append.separate == id
extract_x = fun(A) separate(A)(0)
extract_t = fun(A) separate(A)(1)

## initial conditions of shock tube problem
begin function (rho, rho*V, e) = init()
  double [] :: rho, u, v, w, p
  rho[x]  = center_step_x(x, 1.0, 0.125)
  u[x] = center_step_x(x, 0.75, 0.0)
  v[x] = center_step_x(x, 0.0, 0.0)
  w[x] = center_step_x(x, 0.0, 0.0)
  p[x]  = center_step_x(x, 1.0, 0.1)
  V = (u, v, w)
  e  = p/gamma1 + 0.5*rho*norm2(V)
end function

begin function (V, p) = calc_primitive(rho, rhoV, e)
  V = rhoV / rho
  p = gamma1*(e - 0.5*rho*norm2(V))
end function

begin function (Frho, FrhoV, Fe) = Flux_x(rho, V, p, e)
  u = extract_x(V)
  Frho = rho*u
  FrhoV = rho*V*u + (p, 0, 0)
  Fe = (e + p)*u
end function

begin function F = mean_flux(S_L, S_R, S_M, F_L, F_R, U_L, U_R, U_stL, U_stR)
  F_stL = F_L + min(S_L, 0)*(U_stL - U_L)
  F_stR = F_R + max(S_R, 0)*(U_stR - U_R)
  F = if S_M > 0 then F_stL else F_stR
end function

begin function U_next = time_evol(U, F)
  U_next = U - dt * ddx(F)
end function

begin function (rho_st, V_st, e_st) = state_star(S_M, p_st, S, rho, V, e, p)
  (u, V_t) = separate(V)
  rho_st = rho * (S - u)/(S - S_M)
  V_t_st = V_t
  V_st = append(S_M, V_t_st)
  e_st = ((S - u)*e - p*u + p_st*S_M)/(S - S_M)
end function

begin function c_f = sound_speed(rho, p)
  c_f = sqrt(gamma*p/rho)
end function

begin function (S_L, S_R) = fastest_signal_speed((rho_L, p_L, u_L), (rho_R, p_R, u_R))
  c_fL = sound_speed(rho_L, p_L)
  c_fR = sound_speed(rho_R, p_R)
  c_f = max(c_fL, c_fR)
  S_L = min(u_L, u_R) - c_f
  S_R = max(u_L, u_R) + c_f
end function

begin function S_M = middle_speed((S_L, rho_L, p_L, u_L), (S_R, rho_R, p_R, u_R))
  S_M = (p_R - p_L + rho_L*u_L*(S_L - u_L) - rho_R*u_R*(S_R - u_R)) / (rho_L*(S_L - u_L) - rho_R*(S_R - u_R))
end function

begin function p_st = pressure_star((S_L, rho_L, p_L, u_L), (S_R, rho_R, p_R, u_R))
  p_st = (rho_L*p_R*(S_L - u_L) - rho_R*p_L*(S_R - u_R) + rho_L*rho_R*(S_R - u_R)*(S_L - u_L)*(u_L - u_R)) / (rho_L*(S_L - u_L) - rho_R*(S_R - u_R))
end function

## flux of one-dimensional Euler equations evaluated by HLLC method
begin function F_HLLC = HLLC_Flux((rho_L, rhoV_L, e_L), (rho_R, rhoV_R, e_R))
  (V_L, p_L) = calc_primitive(rho_L, rhoV_L, e_L)
  (V_R, p_R) = calc_primitive(rho_R, rhoV_R, e_R)
  u_L = extract_x(V_L)
  u_R = extract_x(V_R)
  manifest :: (S_L, S_R) = fastest_signal_speed((rho_L, p_L, u_L), (rho_R, p_R, u_R))
  manifest :: S_M = middle_speed((S_L, rho_L, p_L, u_L), (S_R, rho_R, p_R, u_R))
  p_st = pressure_star((S_L, rho_L, p_L, u_L), (S_R, rho_R, p_R, u_R))
  (rho_stL, V_stL, e_stL) = state_star(S_M, p_st, S_L, rho_L, V_L, e_L, p_L)
  (rho_stR, V_stR, e_stR) = state_star(S_M, p_st, S_R, rho_R, V_R, e_R, p_R)
  U_L = (rho_L, rhoV_L, e_L)
  U_R = (rho_R, rhoV_R, e_R)
  U_stL = (rho_stL, rho_stL*V_stL, e_stL)
  U_stR = (rho_stR, rho_stR*V_stR, e_stR)
  F_L = Flux_x(rho_L, V_L, p_L, e_L)
  F_R = Flux_x(rho_R, V_R, p_R, e_R)
  F_HLLC = mean_flux(S_L, S_R, S_M, F_L, F_R, U_L, U_R, U_stL, U_stR)
end function

begin function (UR, UL) = TVD_MUSCL(U, Ob, Of)
  DU = Of(U) - Ob(U)
  DP = max3(0.0, min(beta*Ob(DU), Of(DU)), min(Ob(DU), beta*Of(DU)))
  DN = min3(0.0, max(beta*Ob(DU), Of(DU)), max(Ob(DU), beta*Of(DU)))
  Delta = if Of(DU) > 0 then DP else DN
  UL = U - 0.5*Delta
  UR = U + 0.5*Delta
end function

begin function (Frho, FrhoV, Fe) = Flux_fromU((rho, rhoV, e))
  (V, p) = calc_primitive(rho, rhoV, e)
  (Frho, FrhoV, Fe) = Flux_x(rho, V, p, e)
end function

begin function (U_L, U_R) = left_right_state(UR, UL, DivF, Ob, Of)
  ULbar = UL - 0.5*dt*DivF
  URbar = UR - 0.5*dt*DivF
  U_L = Ob(URbar)
  U_R = Of(ULbar)
end function

## second-order accurate TVD-MUSCL method
begin function (U_xL, U_xR) = MUSCL_Hancock(U)
  manifest :: (UR_x, UL_x) = TVD_MUSCL(U, Xb, Xf)
  FL = Flux_fromU(UL_x)
  FR = Flux_fromU(UR_x)
  manifest :: DivF = (FR - FL)/dx
  (U_xL, U_xR) = left_right_state(UR_x, UL_x, DivF, Xb, Xf)
end function

## first-order accurate
first_order_LR = fun(U) (Xb(U), Xf(U))

## time step
begin function U_next = step(rho, (rhou, rhov, rhow), e)
  U = (rho, (rhou, rhov, rhow), e)
  #(U_xL, U_xR) = first_order_LR(U)   # first-order scheme
  (U_xL, U_xR) = MUSCL_Hancock(U)   # second-order scheme
  manifest :: F = HLLC_Flux(U_xL, U_xR)
  U_next = time_evol(U, F)
end function

